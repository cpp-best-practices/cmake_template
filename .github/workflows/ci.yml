name: ci

on:
  pull_request:

  push:
    branches:
      - develop
      - main

  release:
    types:
      - published

env:
  CLANG_TIDY_VERSION: "15.0.2"
  VERBOSE: 1

jobs:
  test:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      # Recommendations:
      #   * support at least 2 operating systems
      #   * support at least 2 compilers
      #   * make sure all supported configurations for your project are built

      # Disable/enable builds in this list to meet the above recommendations
      # and your own projects needs
      matrix:
        build_shared:
          - OFF
        build_type:
          - Debug
          - Release
        compiler:
          # you can specify the version after `-` like "llvm-15.0.2".
          - gcc-11
          - llvm-15.0.2
        generator:
          - "Ninja Multi-Config"
        os:
          - macos-10.15
          - ubuntu-20.04
          - windows-2019
        packaging_maintainer_mode:
          - OFF
          - ON

        exclude:
          # mingw is determined by this author to be too buggy to support
          - compiler: gcc-11
            os: windows-2019

        include:
          # Add appropriate variables for gcov version required. This will intentionally break
          # if you try to use a compiler that does not have gcov set
          - compiler: gcc-11
            enable_ipo: On
            gcov_executable: gcov

          - compiler: llvm-15.0.2
            enable_ipo: Off
            gcov_executable: "llvm-cov gcov"

          - enable_ipo: Off
            os: macos-10.15

          # Set up preferred package generators, for given build configurations
          - build_type: Release
            package_generator: TBZ2
            packaging_maintainer_mode: OFF

          # This exists solely to make sure a non-multiconfig build works
          - build_type: Debug
            compiler: gcc-11
            enable_ipo: Off
            gcov_executable: gcov
            generator: "Unix Makefiles"
            os: ubuntu-20.04
            packaging_maintainer_mode: On

          # Windows msvc builds
          - build_type: Debug
            compiler: msvc
            enable_ipo: On
            generator: "Visual Studio 17 2022"
            os: windows-2022
            packaging_maintainer_mode: On

          - build_type: Release
            compiler: msvc
            enable_ipo: On
            generator: "Visual Studio 17 2022"
            os: windows-2022
            packaging_maintainer_mode: On

          - build_type: Debug
            compiler: msvc
            generator: "Visual Studio 17 2022"
            os: windows-2022
            packaging_maintainer_mode: Off

          - build_type: Release
            compiler: msvc
            generator: "Visual Studio 17 2022"
            os: windows-2022
            package_generator: ZIP
            packaging_maintainer_mode: Off

          - build_shared: On
            build_type: Release
            compiler: msvc
            enable_ipo: On
            generator: "Visual Studio 17 2022"
            os: windows-2022
            packaging_maintainer_mode: On

    steps:
      - name: Check for llvm version mismatches
        if: ${{ contains(matrix.compiler, 'llvm') && !contains(matrix.compiler, env.CLANG_TIDY_VERSION) }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('There is a mismatch between configured llvm compiler and clang-tidy version chosen')

      - name: Checkout repository
        uses: actions/checkout@master
        with:
          fetch-depth: 1

      - name: Setup Cache
        uses: ./.github/actions/setup_cache
        with:
          build_type: ${{ matrix.build_type }}
          compiler: ${{ matrix.compiler }}
          generator: ${{ matrix.generator }}
          packaging_maintainer_mode: ${{ matrix.packaging_maintainer_mode }}

      - name: Project Name
        uses: cardinalby/export-env-action@v2
        with:
          envFile: ".github/constants.env"

      - name: Setup Cpp
        uses: aminya/setup-cpp@v1
        with:
          ccache: true
          clangtidy: ${{ env.CLANG_TIDY_VERSION }}
          cmake: true
          compiler: ${{ matrix.compiler }}
          cppcheck: true
          gcovr: true
          ninja: true
          opencppcoverage: true
          vcpkg: false
          vcvarsall: ${{ contains(matrix.os, 'windows' )}}

      - name: Configure CMake
        run: |
          cmake -B ./build -S . -D${{ env.PROJECT_NAME }}_ENABLE_COVERAGE:BOOL=${{ matrix.build_type == 'Debug' }} -D${{ env.PROJECT_NAME }}_ENABLE_IPO=${{ matrix.enable_ipo }} -D${{ env.PROJECT_NAME }}_PACKAGING_MAINTAINER_MODE:BOOL=${{ matrix.packaging_maintainer_mode }} -DCMAKE_BUILD_TYPE:STRING=${{ matrix.build_type }} -DGIT_SHA:STRING=${{ github.sha }} -G "${{ matrix.generator }}"

      - name: Build
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: |
          cmake --build ./build --config ${{ matrix.build_type }}

      - name: Unix - Test and coverage
        if: runner.os != 'Windows'
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: |
          ctest -C ${{ matrix.build_type }}
          gcovr -j ${{ env.nproc }} --delete --root ../ --print-summary --xml-pretty --xml coverage.xml . --gcov-executable '${{ matrix.gcov_executable }}'
        working-directory: ./build

      - name: Windows - Test and coverage
        if: runner.os == 'Windows'
        run: |
          OpenCppCoverage.exe --export_type cobertura:coverage.xml --cover_children -- ctest -C ${{ matrix.build_type }}
        working-directory: ./build

      - name: CPack
        if: matrix.package_generator != ''
        run: |
          cpack -C ${{ matrix.build_type }} -G ${{ matrix.package_generator }}
        working-directory: ./build

      - name: Publish Tagged Release
        if: ${{ startsWith(github.ref, 'refs/tags/') && matrix.package_generator != '' }}
        uses: softprops/action-gh-release@v1
        with:
          files: |
            build/*-*${{ matrix.build_type }}*-*.*

      - name: Publish to codecov
        uses: codecov/codecov-action@v2
        with:
          files: ./build/coverage.xml
          flags: ${{ runner.os }}
          name: ${{ runner.os }}-coverage
