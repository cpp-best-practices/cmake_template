# syntax=docker/dockerfile:1.5-labs

# [Choice] bionic (18.04), focal (20.04)
ARG VARIANT="focal"
FROM ubuntu:${VARIANT}

# Restate the variant to use it later on in the llvm and cmake installations
ARG VARIANT

# Install necessary packages available from standard repos
RUN <<EOF
    apt-get update -qq
    export DEBIAN_FRONTEND=noninteractive
    apt-get install -y --no-install-recommends software-properties-common wget apt-utils file zip
    apt-get install -y --no-install-recommends openssh-client gpg-agent socat rsync
    apt-get install -y --no-install-recommends make ninja-build git
    apt-get install -y --no-install-recommends python3 python3-pip
EOF

# Install conan
RUN <<EOF
    python3 -m pip install --upgrade pip setuptools
    python3 -m pip install conan
    conan --version
EOF

# By default, anything you run in Docker is done as superuser.
# Conan runs some install commands as superuser, and will prepend `sudo` to
# these commands, unless `CONAN_SYSREQUIRES_SUDO=0` is in your env variables.
ENV CONAN_SYSREQUIRES_SUDO=0
# Some packages request that Conan use the system package manager to install
# a few dependencies. This flag allows Conan to proceed with these installations;
# leaving this flag undefined can cause some installation failures.
ENV CONAN_SYSREQUIRES_MODE="enabled"

# User-settable versions:
# This Dockerfile should support gcc-[7, 8, 9, 10, 11] and clang-[10, 11, 12, 13]
# Earlier versions of clang will require significant modifications to the IWYU section
ARG GCC_VER=11
# Add gcc-${GCC_VER}
RUN <<EOF
    add-apt-repository -y ppa:ubuntu-toolchain-r/test
    apt-get update -qq
    export DEBIAN_FRONTEND=noninteractive
    apt-get install -y --no-install-recommends gcc-${GCC_VER} g++-${GCC_VER} gdb
EOF

# Set gcc-${GCC_VER} as default gcc
RUN <<EOF
    update-alternatives --install /usr/bin/gcc gcc $(which gcc-${GCC_VER}) 100
    update-alternatives --install /usr/bin/g++ g++ $(which g++-${GCC_VER}) 100
EOF

ARG LLVM_VER=13
# Add clang-${LLVM_VER}
ARG LLVM_URL="http://apt.llvm.org/${VARIANT}/"
ARG LLVM_PKG="llvm-toolchain-${VARIANT}-${LLVM_VER}"
RUN <<EOF
    wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add - 2>/dev/null
    add-apt-repository -y "deb ${LLVM_URL} ${LLVM_PKG} main"
    apt-get update -qq
    export DEBIAN_FRONTEND=noninteractive
    apt-get install -y --no-install-recommends clang-${LLVM_VER} lldb-${LLVM_VER} lld-${LLVM_VER} clangd-${LLVM_VER}
    apt-get install -y --no-install-recommends llvm-${LLVM_VER}-dev libclang-${LLVM_VER}-dev clang-tidy-${LLVM_VER}
EOF

# Set the default clang-tidy, so CMake can find it
RUN <<EOF
    update-alternatives --install /usr/bin/clang-tidy clang-tidy $(which clang-tidy-${LLVM_VER}) 1
EOF

# Set clang-${LLVM_VER} as default clang
RUN <<EOF
    update-alternatives --install /usr/bin/clang   clang   $(which clang-${LLVM_VER})   100
    update-alternatives --install /usr/bin/clang++ clang++ $(which clang++-${LLVM_VER}) 100
EOF

# Add current cmake/ccmake, from Kitware
ARG CMAKE_URL="https://apt.kitware.com/ubuntu/"
ARG CMAKE_PKG=${VARIANT}
RUN <<EOF
    wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null
    apt-add-repository -y "deb ${CMAKE_URL} ${CMAKE_PKG} main"
    apt-get update -qq
    export DEBIAN_FRONTEND=noninteractive
    apt-get install -y --no-install-recommends cmake cmake-curses-gui
EOF

# Install editors
RUN <<EOF
    apt-get update -qq
    export DEBIAN_FRONTEND=noninteractive
    apt-get install -y --no-install-recommends neovim emacs nano
EOF

# Install optional dependecies
RUN <<EOF
    apt-get update -qq
    export DEBIAN_FRONTEND=noninteractive
    apt-get install -y --no-install-recommends doxygen graphviz ccache cppcheck
EOF

# Install include-what-you-use
ENV IWYU="/home/iwyu"
ENV IWYU_BUILD="${IWYU}/build"
ENV IWYU_SRC="${IWYU}/include-what-you-use"
RUN <<EOF
    mkdir -p ${IWYU_BUILD}
    git clone --branch clang_${LLVM_VER} https://github.com/include-what-you-use/include-what-you-use.git ${IWYU_SRC}
    CC=clang-${LLVM_VER} 
    CXX=clang++-${LLVM_VER} 
    cmake -S ${IWYU_SRC} -B ${IWYU_BUILD} -G "Unix Makefiles" -DCMAKE_PREFIX_PATH=/usr/lib/llvm-${LLVM_VER}
    cmake --build ${IWYU_BUILD} -j
    cmake --install ${IWYU_BUILD}
EOF

# Per https://github.com/include-what-you-use/include-what-you-use#how-to-install:
# `You need to copy the Clang include directory to the expected location before
#  running (similarly, use include-what-you-use -print-resource-dir to learn
#  exactly where IWYU wants the headers).`
RUN <<EOF
    mkdir -p $(include-what-you-use -print-resource-dir 2>/dev/null)
    ln -s $(readlink -f /usr/lib/clang/${LLVM_VER}/include) $(include-what-you-use -print-resource-dir 2>/dev/null)/include
EOF

## Cleanup cached apt data we don't need anymore
RUN <<EOF
    apt-get autoremove -y
    apt-get clean
    rm -rf /var/lib/apt/lists/*
EOF

# Allow the user to set compiler defaults
ARG USE_CLANG
# if --build-arg USE_CLANG=1, set CC to 'clang' or set to null otherwise.
ENV CC="${USE_CLANG:+"clang"}"
ENV CXX="${USE_CLANG:+"clang++"}"
# if CC is null, set it to 'gcc' (or leave as is otherwise).
ENV CC="${CC:-"gcc"}"
ENV CXX="${CXX:-"g++"}"

# Include project
#ADD . /workspaces/cpp_starter_project
#WORKDIR /workspaces/cpp_starter_project

CMD sleep infinity
